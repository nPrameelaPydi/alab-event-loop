Trampolining is a technique used to optimize recursive functions to avoid stack overflow errors. In standard recursion, each function call consumes stack space. If a function recurses too deeply, you may encounter a stack overflow. Trampolining helps mitigate this by transforming recursive calls into a loop, thus avoiding the risk of stack overflow.

Steps to Write a Trampolined Function
Return Functions Instead of Calling Them: Instead of making a direct recursive call, the function returns another function that will perform the next step of the recursion. This allows you to keep track of the next state without consuming additional stack space.
Use a Loop to Execute Returned Functions: Instead of relying on the call stack, you use a loop to repeatedly execute the functions returned from your trampoline.
Base Case Handling: As with regular recursion, you need to handle the base case to stop the recursion.

**********************************

"Deferred execution" refers to the practice of delaying the execution of a piece of code until a later point in time, rather than executing it immediately. In the context of the flattening function we discussed, it specifically relates to how functions are returned instead of being called directly.

Key Concepts of Deferred Execution
Function Returns:
Instead of executing a function right away, you return a new function that will execute the original function when called. This allows the program to continue running and to avoid deep recursive calls that could lead to a stack overflow.
Separation of State:
By returning a function, you can capture the current state (like the array to be flattened and the accumulated result) without consuming additional stack space at that moment. This allows you to manage complex states over multiple iterations or calls.
Use in Trampolining:
Deferred execution is particularly useful in the trampolining pattern. The trampoline function repeatedly invokes the returned functions until a final result is achieved. This keeps the call stack from growing too deep and avoids stack overflow errors.

if (Array.isArray(head)) {
    return function() {
        return _flatten(head.concat(tail), result);
    };
} else {
    return function() {
        return _flatten(tail, result.concat(head));
    };
}
When head is an array: Instead of calling _flatten immediately, it returns a function that will call _flatten later with the updated parameters.
When head is not an array: Again, it returns a function for the next call of _flatten, this time updating the result.
Benefits of Deferred Execution
Avoiding Stack Overflow: By delaying the execution of recursive calls, you can avoid deep recursion that can lead to stack overflow errors.
Improved Control Flow: It allows for greater flexibility in managing how and when functions are executed, which can simplify complex recursive logic.
State Management: It keeps the current state accessible without pushing new calls onto the stack, allowing the program to manage multiple states smoothly.
Summary
Deferred execution is a powerful programming technique that allows you to control when a piece of code runs. In the context of the flattening function, it enables safe handling of potentially deep recursive calls through the use of trampolining, maintaining state without risking stack overflow.


###############

Understanding setTimeout
Asynchronous Execution:
When you use setTimeout, you are scheduling a function to be executed after a specified delay. The delay can be 0ms, which means "as soon as possible" but after the current execution context is finished.
Event Loop:
JavaScript is single-threaded, meaning it can only execute one piece of code at a time. However, it has an event loop that handles asynchronous operations. When you use setTimeout, you push the function to a queue that the event loop will process once the current stack (the current executing code) is empty.
Allowing Rendering:
By using setTimeout(..., 0), you allow the browser to take a moment to render any changes to the UI before the next iteration of your function runs. This way, the user can see the output as it is being calculated rather than waiting for the entire process to finish before seeing anything.